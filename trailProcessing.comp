#version 460 core

uniform float diffuseWeight;
uniform float evaporationRate;
uniform float iTime;
uniform float iBass;

// total size (x*y*z) should be a multiple of 32 (Nvidia) or 64 (AMD)
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D screen;

layout(std430, binding = 3) buffer TrailMapBuffer {
    float trailMap[];  // This is a 1D array representing the 2D matrix
};

const float kernel3x3[9] = float[9](
    1.0, 2.0, 1.0,
    2.0, 4.0, 2.0,
    1.0, 2.0, 1.0
);

// function to generate cycling color palettes
// https://iquilezles.org/articles/palettes/
// http://dev.thi.ng/gradients/
vec3 palette(float t)
{
	vec3 a = vec3(0.731, 1.098, 0.192);
	vec3 b = vec3(0.358, 1.090, 0.657); 
	vec3 c = vec3(1.077, 0.360, 0.328);
	vec3 d = vec3(0.965, 2.265, 0.837);
	return a + b*cos( 6.28318*(c*t+d));
}

uint getIndex(int x, int y) {
    return y * imageSize(screen).x + x;
}

float averageBlur3x3(ivec2 pixelCoords)
{

	float sum = 0;
	// 3x3 blur
	int index = 0; // Index for accessing the kernel array
	for (int offsetX = -1; offsetX <= 1; offsetX ++) {
		for (int offsetY = -1; offsetY <= 1; offsetY ++) {
			int sampleX = pixelCoords.x + offsetX;
			int sampleY = pixelCoords.y + offsetY;
			sum += (trailMap[getIndex(sampleX,sampleY)]);

			index++; // Move to the next element in the kernel array
		}
	}

	sum = sum / 9.0f;

	return sum;
}

float gaussianBlur3x3(ivec2 pixelCoords)
{

	float sum = 0;
	// 3x3 blur
	int index = 0; // Index for accessing the kernel array
	for (int offsetX = -1; offsetX <= 1; offsetX ++) {
		for (int offsetY = -1; offsetY <= 1; offsetY ++) {
			int sampleX = pixelCoords.x + offsetX;
			int sampleY = pixelCoords.y + offsetY;
			float weight = kernel3x3[index] / 16.0;

			sum += (trailMap[getIndex(sampleX,sampleY)] * weight);

			index++; // Move to the next element in the kernel array
		}
	}

	return sum;
}

void main()
{
    
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);	
	ivec2 dims = imageSize(screen);

    uint trailMapIndex = getIndex(pixelCoords.x, pixelCoords.y);

    float trail = trailMap[trailMapIndex];

	vec4 color; 
	vec3 maxColor;

    float blurredTrail = gaussianBlur3x3(pixelCoords);
	blurredTrail = trail * (1 - diffuseWeight) + blurredTrail * diffuseWeight;
	trailMap[trailMapIndex] = max(0.0f, blurredTrail-evaporationRate);	
	
	if (blurredTrail > 0.7f){
		color = vec4(palette(blurredTrail + iBass/6), blurredTrail); //This way only the heads glow with the energy of the bass
	}
	else if (blurredTrail > 0.0f){
		color = vec4(palette(blurredTrail), blurredTrail);
		//maxColor = vec3(palette(blurredTrail));
		//color.rgb = color.rgb + iBass * (vec3(1.0) - color.rgb);
	}
	
    imageStore(screen, pixelCoords, color);

}