#version 460 core

uniform float iTime;
uniform int numAgents;
uniform float highEnergy;
uniform float iBass;
uniform float midEnergy;
float dancingDirections[8] = float[](0.0f, 1.5709f, -1.0f, -1.5709f, 1.0472f, -1.0472f, 2.0944f, 3.6652f);

struct Agent
{
	// Not quite sure yet, but The struct has to be a multiple of 8 bytes. Otherwise strange results occur.
	vec2 pos;
	float angle;
	float velocity; 
};	

layout (std430, binding = 1) buffer agentsBuffer{Agent agents[];};

struct AgentSettings {
	float sensorAngleOffset;
	int sensorOffsetDistance;
	int sensorWidth;
	float turningSpeed;
};

layout (std140, binding = 2) uniform agentSettingsBuffer{AgentSettings settings;};

// total size (x*y*z) should be a multiple of 32 (Nvidia) or 64 (AMD)
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D screen;

layout(std430, binding = 3) buffer TrailMapBuffer {
    float trailMap[];  // This is a 1D array representing the 2D matrix
};

// Hash function www.cs.ubc.ca/~rbridson/docs/schechter-sca08-turbulence.pdf
uint hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float random(float seed) {
    return fract(sin(seed) * 43758.5453);
}

float randomInRange(float min, float max, float seed) {
    return min + (max - min) * random(seed);
}

uint getIndex(int x, int y) {
    return y * imageSize(screen).x + x;
}

float sense(Agent agent, float angle){
	ivec2 dims = imageSize(screen);
	float sensorAngle = agent.angle + angle;
	vec2 sensorDir = vec2(cos(sensorAngle), sin(sensorAngle));

	vec2 sensorPos = agent.pos + sensorDir * settings.sensorOffsetDistance;
	int sensorCentreX = int(sensorPos.x);
	int sensorCentreY = int(sensorPos.y);

	float sum = 0;

	for (int offsetX = -settings.sensorWidth; offsetX <= settings.sensorWidth; offsetX ++) {
		for (int offsetY = -settings.sensorWidth; offsetY <= settings.sensorWidth; offsetY ++) {

			int sampleX = sensorCentreX + offsetX;
			int sampleY = sensorCentreY + offsetY;

			if (sampleX < dims.x && sampleX >= 0 && sampleY < dims.y && sampleY >= 0){
				uint trailMapIndex = getIndex(sampleX, sampleY);
				sum += trailMap[trailMapIndex];
			}
		}
	}

	return sum;
	
}

void drawCrossHeads(Agent agent, ivec2 dims, int sidesSize){

	ivec2 agentCoordOnGrid;
	agentCoordOnGrid.x = int(agent.pos[0]);
	agentCoordOnGrid.y = int(agent.pos[1]);
	ivec2 pixelCoord;

	uint trailMapIndex;

	for (int offset_x = -sidesSize; offset_x <= sidesSize; offset_x++) {
		for (int offset_y = -sidesSize; offset_y <= sidesSize; offset_y++) {
			pixelCoord = agentCoordOnGrid + ivec2(offset_x, offset_y);

			if (abs(offset_y * offset_x) == 0){
				if (pixelCoord.x < dims.x && pixelCoord.x >= 0 && pixelCoord.y < dims.y && pixelCoord.x >= 0) {
					trailMapIndex = getIndex(pixelCoord.x, pixelCoord.y);

					if (offset_y == 0 && offset_x == 0) {
						trailMap[trailMapIndex] = 1.0f;
					}
					else {
						trailMap[trailMapIndex] = 1.0f;

					}
				}
			}
		}		
	}
}

void drawSquareHeads(Agent agent, ivec2 dims, int headSize){

	ivec2 agentCoordOnGrid;
	agentCoordOnGrid.x = int(agent.pos[0]);
	agentCoordOnGrid.y = int(agent.pos[1]);
	ivec2 pixelCoord;

	uint trailMapIndex;

	for (int offset_x = -headSize; offset_x <= headSize; offset_x++) {
		for (int offset_y = -headSize; offset_y <= headSize; offset_y++) {

			pixelCoord = agentCoordOnGrid + ivec2(offset_x, offset_y);

			if (pixelCoord.x < dims.x && pixelCoord.x >= 0 && pixelCoord.y < dims.y && pixelCoord.x >= 0) {

				trailMapIndex = getIndex(pixelCoord.x, pixelCoord.y);
				trailMap[trailMapIndex] = 1.0f;
			}
			
		}		
	}
}


void drawCircleHeads(Agent agent, ivec2 dims, int headSize){

	ivec2 agentCoordOnGrid;
	agentCoordOnGrid.x = int(agent.pos[0]);
	agentCoordOnGrid.y = int(agent.pos[1]);
	ivec2 pixelCoord;

	uint trailMapIndex;

	for (int offset_x = -headSize; offset_x <= headSize; offset_x++) {
		for (int offset_y = -headSize; offset_y <= headSize; offset_y++) {

			pixelCoord = agentCoordOnGrid + ivec2(offset_x, offset_y);
				if (pixelCoord.x < dims.x && pixelCoord.x >= 0 && pixelCoord.y < dims.y && pixelCoord.x >= 0) {
					trailMapIndex = getIndex(pixelCoord.x, pixelCoord.y);

					if (offset_y == 0 && offset_x == 0) {
						trailMap[trailMapIndex] = 1.0f;
					}
					else {
						float trail = 1.0f - float(offset_x*offset_x + offset_y*offset_y)/float(headSize*headSize);
						if (trail > 0.0f)
						{
							trailMap[trailMapIndex] = clamp(trail + trailMap[trailMapIndex], 0.0f, 1.0f);
						}
						

				}
			}
			
		}		
	}
}

void updateAgentAndTrailMap(uint agentIndex){
	ivec2 dims = imageSize(screen);
	Agent agent = agents[agentIndex];

	// Steer based on sensory data
	if (highEnergy < 0.7){
		float weightForward = sense(agent, 0);
		float weightLeft = sense(agent, settings.sensorAngleOffset);
		float weightRight = sense(agent, -settings.sensorAngleOffset);

		// Continue in same direction
		if (weightForward > weightLeft && weightForward > weightRight) {
			agent.angle += 0.0f;
		}
		// Turn right
		else if (weightRight > weightLeft) {
			agent.angle -= (settings.sensorAngleOffset * settings.turningSpeed);
		}
		// Turn left
		else if (weightLeft > weightRight) {
			agent.angle += (settings.sensorAngleOffset * settings.turningSpeed);
		}
		else{
			agent.angle += randomInRange(-0.1f, 0.1f, iTime * 0.01 * (agent.pos[0] + agent.pos[1])); // 0.1 rad is about 5.73 degrees
		}
		agent.angle += highEnergy*randomInRange(-highEnergy, highEnergy, iTime * 0.01 * (agent.pos[0] + agent.pos[1])); //small perturbation
	}
	else{
		agent.angle += randomInRange(0.0f, 6.282f, iTime * 0.01 * (agent.pos[0] + agent.pos[1]));
	}


	//agent.pos[0] += (agent.velocity + 0.5*iBass) * cos(agent.angle);
	//agent.pos[1] += (agent.velocity + 0.5*iBass) * sin(agent.angle);
	float energyTriplet = (1.0f/3.0f)*(iBass + midEnergy + highEnergy);
	if (energyTriplet > 0.2f){
		agent.pos[0] += (energyTriplet/2.0f + 0.2f) * cos(agent.angle);
		agent.pos[1] += (energyTriplet/2.0f + 0.2f) * sin(agent.angle);
	}
	else{
		//agent.pos[0] += highEnergy * cos(randomInRange(0.0f, 6.282f, iTime * 0.01 * (agent.pos[0] + agent.pos[1])));
		//agent.pos[1] += highEnergy * sin(randomInRange(0.0f, 6.282f, iTime * 0.01 * (agent.pos[0] + agent.pos[1])));
		agent.pos[0] += (energyTriplet + 0.1f)* cos(randomInRange(-3.1415f, 3.1415f, iTime * 0.01 * (agent.pos[0] + agent.pos[1])));
		agent.pos[1] += (energyTriplet + 0.1f)* sin(randomInRange(-3.1415f, 3.1415f, iTime * 0.01 * (agent.pos[0] + agent.pos[1])));
	}
	


	/*
	if (iBass > 0.5f){
		//float sign = sign(cos(iTime));
		//agent.pos[0] += sign * 0.5f;// * cos(randomInRange(0.0f, 6.282f, iBass));
		//agent.pos[1] += sign * 0.5f;// * sin(randomInRange(0.0f, 6.282f, iBass));
		int directionIndex = int(8.0f*sin(iTime)*sin(iTime));//randomInRange(0.0f, 8.0f, iTime));
		agent.pos[0] += cos(dancingDirections[directionIndex]);
		agent.pos[1] += sin(dancingDirections[directionIndex]);

	}
	*/
	
	//Cyclical boundaries

	if (agent.pos[0] > dims.x) {
		agent.pos[0] -= float(dims.x);
	}
	else if (agent.pos[0] < 0){
		agent.pos[0] += float(dims.x);
	}

	if (agent.pos[1] > dims.y) {
		agent.pos[1] -= float(dims.y);
	}
	else if (agent.pos[1] < 0){
		agent.pos[1] += float(dims.y);
	}	

	agents[agentIndex] = agent;

	if (iBass > 0.5f){
		drawCircleHeads(agent, dims, int(5*iBass));
	}
	else{
		drawCrossHeads(agent, dims, 1);
	}	


	/*
		if (iBass < 0.5f){
		drawCircleHeads(agent, dims, 5 - int(5*iBass));
		//drawCircleHeads(agent, dims, int(5*iBass));
	}
	else{
		drawCrossHeads(agent, dims, 1);
	}	
	*/


	//drawCrossHeads(agent, dims, 1);
	//drawSquareHeads(agent, dims, 2);
	//uint trailMapIndex = getIndex(int(agent.pos[0]), int(agent.pos[1]));
	//trailMap[trailMapIndex] = 1.0f;


}

void main()
{
	uint agentIndex = gl_GlobalInvocationID.x;
	ivec2 dims = imageSize(screen);

    if (agentIndex < uint(numAgents)) {
		updateAgentAndTrailMap(agentIndex);
    }
}