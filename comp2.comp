#version 460 core

// total size (x*y*z) should be a multiple of 32 (Nvidia) or 64 (AMD)
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D screen;

layout(std430, binding = 3) buffer TrailMapBuffer {
    float trailMap[];  // This is a 1D array representing the 2D matrix
};

// function to generate cycling color palettes
// https://iquilezles.org/articles/palettes/
// http://dev.thi.ng/gradients/
vec3 palette(float t)
{
	vec3 a = vec3(0.731, 1.098, 0.192);
	vec3 b = vec3(0.358, 1.090, 0.657); 
	vec3 c = vec3(1.077, 0.360, 0.328);
	vec3 d = vec3(0.965, 2.265, 0.837);
	return a + b*cos( 6.28318*(c*t+d));
}

uint getIndex(int x, int y) {
    return y * imageSize(screen).x + x;
}

void main()
{
    
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);	
	ivec2 dims = imageSize(screen);

    uint trailMapIndex = getIndex(pixelCoords.x, pixelCoords.y);

    float trail = trailMap[trailMapIndex];
	/*
    if (trail > 0.0f){
        trailMap[trailMapIndex] = max(0.0f, trail-0.001);
    }
	*/
	vec4 color; 

    float sum = 0;
	// 3x3 blur
	for (int offsetX = -1; offsetX <= 1; offsetX ++) {
		for (int offsetY = -1; offsetY <= 1; offsetY ++) {
			int sampleX = pixelCoords.x + offsetX;
			int sampleY = pixelCoords.y + offsetY;
			sum += trailMap[getIndex(sampleX,sampleY)];
		}
	}

	float blurredCol = sum / 9.0f;
	float diffuseWeight = 0.9f;
	blurredCol = trail *(1 - diffuseWeight) + blurredCol * diffuseWeight;
	trailMap[trailMapIndex] = max(0.0f, blurredCol-0.0001);
	
	
	if (blurredCol > 0.0f){
		color = vec4(palette(blurredCol), blurredCol); 
	}
	/*
	else{
		color = vec4(vec3(0.0f), 1.0f); // Background color
	}
	*/
	
    imageStore(screen, pixelCoords, color);

}